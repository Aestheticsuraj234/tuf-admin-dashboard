generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  PREMIUM_USER
}

model User {
  id       String    @id @default(cuid()) @map("_id")
  name     String?
  email    String    @unique
  image    String?
  accounts Account[]
  role     UserRole  @default(USER)

  contents      Content[]
  problemSolved ProblemSolved[]
  problemMarked ProblemMarked[]
  problemNotes  Note[]

  blogLikedBy  BlogLikedBy[]
  blogSavedBy  BlogSavedBy[]
  blogVisitedBy BlogVisitedBy[]
  blogComments  BlogComment[]
  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String
  refreshToken      String? @map("refresh_token")
  accessToken       String? @map("access_token")
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token")
  sessionState      String? @map("session_state")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

enum ContentType {
  DSA
  BLOGS
  CS_SUBJECTS
  SYSTEM_DESIGN
  RESOURCES
}

enum ContentStatus {
  UNPUBLISHED
  PUBLISHED
  ARCHIVED
}

model Content {
  id          String        @id @default(cuid()) @map("_id")
  title       String
  description String
  image       String
  type        ContentType
  status      ContentStatus @default(UNPUBLISHED)
  author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  dsa         Dsa[]
  blog        Blog[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum BlogType {
NEW
EXISTING
}

model Blog {
  id        String  @id @default(cuid()) @map("_id")
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId String
  title     String
  slug     String?  @unique
  description String
  readTime   String?
  thumnail    String
  blogContent  String?
  blogType    BlogType
  blogUrl    String?
  likedBy   BlogLikedBy[]
  savedBy   BlogSavedBy[]
  visitedBy BlogVisitedBy[]
  commentedBy  BlogComment[]
  status  ContentStatus  @default(UNPUBLISHED)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime  @updatedAt

}

model BlogComment{
  id        String  @id @default(cuid()) @map("_id")
  userId   String
  blogId   String
  comment  String
  user User @relation(fields: [userId] , references: [id] , onDelete:Cascade)
  blog Blog @relation(fields: [blogId] , references: [id] , onDelete:Cascade)
    createdAt  DateTime   @default(now())
  updatedAt  DateTime  @updatedAt

}

model BlogLikedBy{
   id        String  @id @default(cuid()) @map("_id")
  userId   String
  blogId   String
  isLiked   Boolean
 user User @relation(fields: [userId] , references: [id] , onDelete:Cascade)
  blog Blog @relation(fields: [blogId] , references: [id] , onDelete:Cascade)

  @@unique([userId , blogId])
}

model BlogSavedBy{
   id        String  @id @default(cuid()) @map("_id")
  userId   String
  blogId   String
  isSaved   Boolean
 user User @relation(fields: [userId] , references: [id] , onDelete:Cascade)
  blog Blog @relation(fields: [blogId] , references: [id] , onDelete:Cascade)

  @@unique([userId , blogId])
}


model BlogVisitedBy{
   id        String  @id @default(cuid()) @map("_id")
  userId   String
  blogId   String
  isVisitedBy  Boolean
 user User @relation(fields: [userId] , references: [id] , onDelete:Cascade)
  blog Blog @relation(fields: [blogId] , references: [id] , onDelete:Cascade)

  @@unique([userId , blogId])
}

model Dsa {
  id          String        @id @default(cuid()) @map("_id")
  content     Content       @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId   String
  title       String
  description String
  dsaSteps    DsaStep[]
  status      ContentStatus @default(UNPUBLISHED)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model DsaStep {
  id          String        @id @default(cuid()) @map("_id")
  dsa         Dsa           @relation(fields: [dsaId], references: [id], onDelete: Cascade)
  dsaId       String
  stepNumber  Int
  stepTitle   String
  dsaChapters DsaChapter[]
  status      ContentStatus @default(UNPUBLISHED)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model DsaChapter {
  id            String        @id @default(cuid()) @map("_id")
  dsaStep       DsaStep       @relation(fields: [dsaStepId], references: [id], onDelete: Cascade)
  dsaStepId     String
  chapterNumber Int
  chapterTitle  String
  problems      Problem[]
  status        ContentStatus @default(UNPUBLISHED)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum DifficultyLevel {
  EASY
  MEDIUM
  HARD
}

model Problem {
  id              String          @id @default(cuid()) @map("_id")
  dsaChapter      DsaChapter      @relation(fields: [dsaChapterId], references: [id], onDelete: Cascade)
  dsaChapterId    String
  title           String
  articleLink     String?
  videoLink       String?
  practiceLink    String?
  difficultyLevel DifficultyLevel @default(EASY)
  status          ContentStatus   @default(UNPUBLISHED)
  solvedBy        ProblemSolved[]
  markedBy        ProblemMarked[]
  notes           Note[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model ProblemSolved {
  id        String  @id @default(cuid()) @map("_id")
  userId    String
  problemId String
  isSolved  Boolean @default(false)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model ProblemMarked {
  id        String  @id @default(cuid()) @map("_id")
  userId    String
  problemId String
  isMarked  Boolean @default(false)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model Note {
  id        String  @id @default(cuid()) @map("_id")
  userId    String
  problemId String
  note      String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}
